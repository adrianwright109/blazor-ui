@page "/"

<TelerikGrid Data=@GridData
             SelectionMode="GridSelectionMode.Multiple"
             SelectedItemsChanged="@((IEnumerable<Employee> employeeList) => OnSelect(employeeList))"
             SelectedItems="@AppStateProvider.ClientAppState.PersistedSelectedItems"
             @bind-Page="@CurrentPage"
             PageSize="@PageSize"
             Pageable="true">
    <GridColumns>
        <GridCheckboxColumn />
        <GridColumn Field=@nameof(Employee.EmployeeId) />
        <GridColumn Field=@nameof(Employee.Name) />
        <GridColumn Field=@nameof(Employee.Team) />
    </GridColumns>
</TelerikGrid>

@if (AppStateProvider.ClientAppState.PersistedSelectedItems != null)
{
    <ul>
        @foreach (Employee employee in AppStateProvider.ClientAppState.PersistedSelectedItems.OrderBy(e => e.EmployeeId))
        {
            <li>
                @employee.EmployeeId
            </li>
        }
    </ul>
}

@code {
    [CascadingParameter]
    public CascadingAppStateProvider AppStateProvider { get; set; }

    int CurrentPage { get; set; }
    int PageSize { get; set; } = 5;

    protected void OnSelect(IEnumerable<Employee> employees)
    {
        var currentPageEmployees = GridData.Skip(PageSize * (CurrentPage - 1)).Take(PageSize);

        if (employees == null || !employees.Any())
        {
            //the user de-selected all items with the header checkbox
            AppStateProvider.ClientAppState.PersistedSelectedItems = AppStateProvider.ClientAppState.PersistedSelectedItems.Except(currentPageEmployees).ToList();
        }
        else
        {
            //handle any deselected items
            var UnselectedEmployees = currentPageEmployees.Except(employees);
            AppStateProvider.ClientAppState.PersistedSelectedItems = AppStateProvider.ClientAppState.PersistedSelectedItems.Except(UnselectedEmployees).ToList();

            //add any new items if they were not selected already
            foreach (var item in employees)
            {
                if (!AppStateProvider.ClientAppState.PersistedSelectedItems.Contains(item))
                {
                    AppStateProvider.ClientAppState.PersistedSelectedItems.Add(item);
                }
            }
        }
    }

    //data binding and sample data
    public List<Employee> GridData { get; set; }

    protected override void OnInitialized()
    {
        GridData = new List<Employee>();
        for (int i = 0; i < 15; i++)
        {
            GridData.Add(new Employee()
            {
                EmployeeId = i,
                Name = "Employee " + i.ToString(),
                Team = "Team " + i % 3
            });
        }
    }
}